{"version":3,"file":"static/js/914.e371cf95.chunk.js","mappings":"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","sources":["components/Forms/UserForm/consts/userFormValidation.js","webpack://react-team-project/./src/components/Forms/UserForm/UserForm.module.css?c4e1","components/Forms/UserForm/components/DatePicker/DatePicker.jsx","components/Forms/UserForm/UserForm.jsx","pages/AccountPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const userFormValidation = Yup.object().shape({\n  userName: Yup.string()\n    .min(3, 'Too Short!')\n    .max(36, 'Too Long!')\n    .required('Required'),\n  email: Yup.string().email('Invalid email').required('Required'),\n  phone: Yup.string().matches(\n    /^\\+380\\d{9}$/,\n    'Phone number must be in the format +380XXXXXXXXX'\n  ),\n  telegram: Yup.string().matches(\n    /^[a-zA-Z0-9_@]*$/,\n    'value contains only latin letters, numbers, underscore and \"@\" symbol'\n  ),\n  avatar: Yup.string('Invalid avatar'),\n  birthday: Yup.date(),\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"user_page\":\"UserForm_user_page__IdM-8\",\"user_page__avatar_container\":\"UserForm_user_page__avatar_container__clYDC\",\"user_page__avatar\":\"UserForm_user_page__avatar__heHgM\",\"avatar_upload_btn\":\"UserForm_avatar_upload_btn__IT77d\",\"user_page__name\":\"UserForm_user_page__name__gaZeS\",\"user_page__role\":\"UserForm_user_page__role__pNHUO\",\"username_form\":\"UserForm_username_form__+nQBC\",\"username_form__label\":\"UserForm_username_form__label__s+UJx\",\"username_form_input\":\"UserForm_username_form_input__dcEYB\",\"is_invalid\":\"UserForm_is_invalid__eJyYG\",\"username_form-input--last\":\"UserForm_username_form-input--last__iUwS9\",\"username_form__submit\":\"UserForm_username_form__submit__l-9Nj\",\"username__form-submit\":\"UserForm_username__form-submit__ES2cl\",\"invalid_feedback\":\"UserForm_invalid_feedback__1Bev4\",\"date_picker\":\"UserForm_date_picker__oJaLN\",\"labelText\":\"UserForm_labelText__AeCIa\"};","import DatePicker from 'react-datepicker';\nimport moment from 'moment';\nimport React, { useCallback, useState } from 'react';\nimport { useField } from 'formik';\n\nconst today = new Date().toISOString().split('T')[0];\n\nconst DatePickerComponent = ({ name = '', birthday }) => {\n  const [field, meta, helpers] = useField('date');\n  const { value } = meta;\n  const { setValue } = helpers;\n  const [currentMonth, setCurrentMonth] = useState(moment());\n\n  const isWeekend = useCallback(date => {\n    const day = moment(date).format('dddd');\n    return day === 'Saturday' || day === 'Sunday';\n  }, []);\n\n  const dayClassNames = useCallback(\n    date => {\n      const classNames = [];\n\n      const monthStart = moment(currentMonth).startOf('month');\n      const monthEnd = moment(currentMonth).endOf('month');\n\n      if (moment(date).isBefore(monthStart) || moment(date).isAfter(monthEnd)) {\n        classNames.push('outside-month');\n      }\n\n      if (isWeekend(date)) {\n        classNames.push('highlighted-weekend');\n      }\n\n      return classNames.join(' ');\n    },\n    [currentMonth, isWeekend]\n  );\n  const formatWeekDay = weekdayShort => weekdayShort.charAt(0);\n\n  const handleMonthChange = useCallback(date => {\n    setCurrentMonth(moment(date));\n  }, []);\n\n  const handleCloseDatePicker = useCallback(() => {\n    setCurrentMonth(value || new Date(birthday || today));\n  }, [value, birthday]);\n\n  return (\n    <DatePicker\n      {...field}\n      selected={value || new Date(birthday || today)}\n      onChange={date => setValue(date)}\n      onMonthChange={handleMonthChange}\n      dayClassName={dayClassNames}\n      calendarStartDay={1}\n      placeholderText={birthday || 'Choose a date'}\n      formatWeekDay={formatWeekDay}\n      showPopperArrow={false}\n      onCalendarClose={handleCloseDatePicker}\n    />\n  );\n};\n\nexport default DatePickerComponent;\n","import React, { useState } from 'react';\n\nimport { useSelector} from 'react-redux';\nimport { selectUser } from '../../../redux/auth/selectors';\n// import { updateUserProfile } from '../../../redux/auth/authOperations';\n\n// import { AiFillPlusCircle } from 'react-icons/ai';\n\nimport moment from 'moment';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { userFormValidation } from './consts/userFormValidation';\n\nimport css from './UserForm.module.css';\n// import userAvatar from '../../images/icons/ph_user.svg';\nimport DatePickerComponent from './components/DatePicker/DatePicker';\nimport { Notify } from 'notiflix';\n\nconst userInfoKeys = ['userName', 'email', 'birthday', 'phone', 'telegram'];\n\nexport function UserForm({ theme }) {\n  // const dispatch = useDispatch();\n  const userInfo = useSelector(selectUser);\n  const [previewImageUrl, setPreviewImageUrl] = useState(null);\n  const [file, setFile] = useState(null);\n\n  let initialUserInfo = {\n    phone: userInfo.phone || '',\n    telegram: userInfo.telegram || '',\n    userName: userInfo.userName,\n    email: userInfo.email,\n    birthday: userInfo.birthday,\n    avatarUpload: false,\n  };\n\n  const submiting = async values => {\n    const formData = new FormData();\n    userInfoKeys.forEach(key => {\n      if (!values[key]) {\n        return;\n      }\n      if (key === 'birthday') {\n        const birthday = moment(values[key]).format('YYYY-MM-DD');\n        formData.append('birthday', birthday);\n        return;\n      }\n      formData.append(key, values[key]);\n    });\n    if (file) {\n      formData.append('avatar', file);\n    }\n    try {\n      // await dispatch(updateUserProfile(formData));\n      Notify.success('Success.Info updated.');\n    } catch (error) {\n      console.log(error);\n      Notify.error('Error.Something gone wrong.');\n    }\n  };\n\n  const handleAvatarChange = (e, setFieldValue) => {\n    const userAvatarPreviewImg = e.target.files[0];\n    setFile(userAvatarPreviewImg);\n    const reader = new FileReader();\n    const blob = new Blob([userAvatarPreviewImg], {\n      type: userAvatarPreviewImg.type,\n    });\n    reader.readAsDataURL(blob);\n    reader.onload = () => {\n      setPreviewImageUrl(reader.result);\n      setFieldValue('avatar-upload', !!userAvatarPreviewImg);\n    };\n  };\n\n  return (\n    <section className={`${css.user_page} ${theme}`}>\n      <Formik\n        initialValues={initialUserInfo}\n        validationSchema={userFormValidation}\n        onSubmit={submiting}\n        enableReinitialize={true}\n      >\n        {formik => {\n          return (\n            <Form>\n              <div className={`${css.user_page__avatar_container} ${theme}`}>\n                <img\n                  className={`${css.user_page__avatar} ${theme}`}\n                  src={previewImageUrl || userInfo.avatar} // icon plus\n                  alt=\"User Avatar\"\n                />\n                <div className={`${css.avatar_upload_container} ${theme}`}>\n                  <Field\n                    id=\"avatar-upload\"\n                    name=\"avatar\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={e => handleAvatarChange(e, formik.setFieldValue)}\n                    style={{ display: 'none' }}\n                  />\n                  <label\n                    htmlFor=\"avatar-upload\"\n                    className={`${css.avatar_upload_btn} ${theme}`}\n                  ></label>\n                </div>\n                <h3 className={`${css.user_page__name} ${theme}`}>\n                  {userInfo.userName || 'Username'}\n                </h3>\n                <p className={`${css.user_page__role} ${theme}`}>User</p>\n              </div>\n              <div className={`${css.username_form} ${theme}`}>\n                <label\n                  htmlFor=\"userName\"\n                  className={`${css.username_form__label} ${theme}`}\n                >\n                  Username\n                  <Field\n                    name=\"userName\"\n                    type=\"text\"\n                    className={\n                      `${css.username_form_input} ${theme}` +\n                      (formik.errors.userName && formik.touched.userName\n                        ? css.is_invalid\n                        : '')\n                    }\n                    placeholder=\"User name\"\n                  />\n                  <ErrorMessage\n                    name=\"userName\"\n                    component=\"div\"\n                    className={css.invalid_feedback}\n                  />\n                </label>\n\n                <label\n                  htmlFor=\"birthday\"\n                  className={`${css.username_form__label} ${theme}`}\n                >\n                  <p className={css.labelText}>Birthday</p>\n                  <DatePickerComponent\n                    name=\"birthday\"\n                    birthday={formik.values.birthday}\n                    className={css.my_date_picker}\n                  />\n                  <ErrorMessage\n                    name=\"birthday\"\n                    component=\"div\"\n                    className={css.invalid_feedback}\n                  />\n                </label>\n\n                <label\n                  htmlFor=\"email\"\n                  className={`${css.username_form__label} ${theme}`}\n                >\n                  <p className={css.labelText}>Email</p>\n                  <Field\n                    name=\"email\"\n                    type=\"email\"\n                    className={`${css.username_form_input} ${theme}`}\n                  />\n                  <ErrorMessage\n                    name=\"email\"\n                    component=\"div\"\n                    className={css.invalid_feedback}\n                  />\n                </label>\n                <label\n                  htmlFor=\"phone\"\n                  className={`${css.username_form__label} ${theme}`}\n                >\n                  <p className={css.labelText}>Phone</p>\n                  <Field\n                    className={`${css.username_form_input} ${theme}`}\n                    id=\"phone\"\n                    name=\"phone\"\n                    type=\"text\"\n                    placeholder=\"Enter your phone\"\n                  />\n                  <ErrorMessage\n                    name=\"phone\"\n                    component=\"div\"\n                    className={css.invalid_feedback}\n                  />\n                </label>\n\n                <label\n                  htmlFor=\"telegram\"\n                  className={`${css.username_form__label} ${theme}`}\n                >\n                  Telegram:\n                  <Field\n                    className={`${css.username_form_input} ${theme}`}\n                    id=\"telegram\"\n                    name=\"telegram\"\n                    type=\"text\"\n                    placeholder=\"Enter your Telegram link\"\n                  />\n                  <ErrorMessage\n                    name=\"telegram\"\n                    component=\"div\"\n                    className={css.invalid_feedback}\n                  />\n                </label>\n                <button\n                  type=\"submit\"\n                  className={`${css.username_form__submit} ${theme}`}\n                  disabled={\n                    formik.isSubmitting || !formik.touched || !formik.dirty\n                  }\n                >\n                  Save Changes\n                </button>\n              </div>\n            </Form>\n          );\n        }}\n      </Formik>\n    </section>\n  );\n}\n","import { UserForm } from '../components/Forms/UserForm/UserForm';\n// import { Helmet } from 'react-helmet-async';\n\nexport default function AccountPage() {\n  return (\n    <main>\n      <span>AccountPage</span>\n      {/* <Helmet>\n        <title>Account</title>\n      </Helmet> */}\n      <UserForm />\n    </main>\n  );\n}\n"],"names":["userFormValidation","Yup","shape","userName","min","max","required","email","phone","matches","telegram","avatar","birthday","today","Date","toISOString","split","name","useField","field","meta","helpers","value","setValue","useState","moment","currentMonth","setCurrentMonth","isWeekend","useCallback","date","day","format","dayClassNames","classNames","monthStart","startOf","monthEnd","endOf","isBefore","isAfter","push","join","handleMonthChange","handleCloseDatePicker","selected","onChange","onMonthChange","dayClassName","calendarStartDay","placeholderText","formatWeekDay","weekdayShort","charAt","showPopperArrow","onCalendarClose","userInfoKeys","UserForm","theme","userInfo","useSelector","selectUser","previewImageUrl","setPreviewImageUrl","file","setFile","initialUserInfo","avatarUpload","submiting","values","formData","FormData","forEach","key","append","Notify","error","console","log","className","css","initialValues","validationSchema","onSubmit","enableReinitialize","formik","src","alt","id","type","accept","e","setFieldValue","userAvatarPreviewImg","target","files","reader","FileReader","blob","Blob","readAsDataURL","onload","result","handleAvatarChange","style","display","htmlFor","errors","touched","placeholder","component","DatePicker","disabled","isSubmitting","dirty","AccountPage"],"sourceRoot":""}