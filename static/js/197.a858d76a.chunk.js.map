{"version":3,"file":"static/js/197.a858d76a.chunk.js","mappings":"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","sources":["components/StatisticsChart/barChart.jsx","components/StatisticsChart/StatisticsChart.jsx","pages/StatisticsPage.jsx"],"sourcesContent":["import React from 'react';\nimport './barChart.css';\n\nconst BarChart = ({ events, selectedDate, updateEvent }) => {\n  const todoForMonth = events.filter(event => event.status === 'todo');\n  const inProgressForMonth = events.filter(\n    event => event.status === 'in progress'\n  );\n  const doneForMonth = events.filter(event => event.status === 'done');\n\n  const totalTasksForMonth =\n    todoForMonth.length + inProgressForMonth.length + doneForMonth.length;\n\n  const todoByDay = events.filter(\n    event =>\n      event.date.toDateString() === selectedDate.toDateString() &&\n      event.status === 'todo'\n  ).length;\n  const inProgressByDay = events.filter(\n    event =>\n      event.date.toDateString() === selectedDate.toDateString() &&\n      event.status === 'in progress'\n  ).length;\n  const doneByDay = events.filter(\n    event =>\n      event.date.toDateString() === selectedDate.toDateString() &&\n      event.status === 'done'\n  ).length;\n\n  const allTasksByDay = todoByDay + inProgressByDay + doneByDay;\n\n  const todoPercentageForDay =\n    allTasksByDay > 0 ? (todoByDay / allTasksByDay) * 100 : 0;\n  const inProgressPercentageForDay =\n    allTasksByDay > 0 ? (inProgressByDay / allTasksByDay) * 100 : 0;\n  const donePercentageForDay =\n    allTasksByDay > 0 ? (doneByDay / allTasksByDay) * 100 : 0;\n\n  const todoPercentageForMonth =\n    (todoForMonth.length / totalTasksForMonth) * 100 || 0;\n  const inProgressPercentageForMonth =\n    (inProgressForMonth.length / totalTasksForMonth) * 100 || 0;\n  const donePercentageForMonth =\n    (doneForMonth.length / totalTasksForMonth) * 100 || 0;\n\n  const maxHeight = 268;\n  const heightForTodoDay = (maxHeight * todoPercentageForDay) / 100;\n  const heightForInProgressDay = (maxHeight * inProgressPercentageForDay) / 100;\n  const heightForDoneDay = (maxHeight * donePercentageForDay) / 100;\n\n  const heightForTodoMonth = (maxHeight * todoPercentageForMonth) / 100;\n  const heightForInProgressMonth =\n    (maxHeight * inProgressPercentageForMonth) / 100;\n  const heightForDoneMonth = (maxHeight * donePercentageForMonth) / 100;\n\n  return (\n    <div className=\"statistickImg\">\n      <div className=\"line\"></div>\n      <div className=\"line2\"></div>\n      <div className=\"line3\"></div>\n      <div className=\"line4\"></div>\n      <div className=\"line5\"></div>\n      <div className=\"line6\"></div>\n      <div className=\"statistic_centr\">\n        <div className=\"x-axis\">\n          <span className=\"x-axis-span_0\">0</span>\n          <span className=\"x-axis-span_20\">20</span>\n          <span className=\"x-axis-span_40\">40</span>\n          <span className=\"x-axis-span_60\">60</span>\n          <span className=\"x-axis-span_80\">80</span>\n          <span>100</span>\n          <span className=\"tasks_text\">Tasks</span>\n        </div>\n\n        <div className=\"chart_todo\">\n          <div className=\"bar_day\" style={{ height: `${heightForTodoDay}px` }}>\n            <span className=\"bar-label\">\n              {todoPercentageForDay.toFixed(2)}%\n            </span>\n          </div>\n        </div>\n\n        <span className=\"nameBar\">To Do</span>\n        <div className=\"chart\">\n          <div className=\"bar\" style={{ height: `${heightForTodoMonth}px` }}>\n            <span className=\"bar-label\">\n              {todoPercentageForMonth.toFixed(2)}%\n            </span>\n          </div>\n        </div>\n\n        <div className=\"chart_in_progres\">\n          <div\n            className=\"bar_day\"\n            style={{ height: `${heightForInProgressDay}px` }}\n          >\n            <span className=\"bar-label\">\n              {inProgressPercentageForDay.toFixed(2)}%\n            </span>\n          </div>\n        </div>\n        <span className=\"nameBar_progress\">In Progress</span>\n\n        <div className=\"chart\">\n          <div\n            className=\"bar\"\n            style={{ height: `${heightForInProgressMonth}px` }}\n          >\n            <span className=\"bar-label\">\n              {inProgressPercentageForMonth.toFixed(2)}%\n            </span>\n          </div>\n        </div>\n\n        <div className=\"chart_done\">\n          <div className=\"bar_day\" style={{ height: `${heightForDoneDay}px` }}>\n            <span className=\"bar-label\">\n              {donePercentageForDay.toFixed(2)}%\n            </span>\n          </div>\n        </div>\n        <span className=\"nameBar_done\">Done</span>\n        <div className=\"chart\">\n          <div className=\"bar\" style={{ height: `${heightForDoneMonth}px` }}>\n            <span className=\"bar-label\">\n              {donePercentageForMonth.toFixed(2)}%\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default BarChart;\n","import React, { useState } from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport './calendarStyles.css';\nimport BarChart from './barChart';\n\nconst StatisticsChart = () => {\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [eventName, setEventName] = useState('');\n  const [events, setEvents] = useState([]);\n\n  const dateClickHandler = date => {\n    setSelectedDate(date);\n  };\n\n  const eventUpdateHandler = event => {\n    setEventName(event.target.value);\n  };\n\n  const createEvent = () => {\n    if (selectedDate && eventName) {\n      const newEvent = {\n        id: new Date().getTime(),\n        date: selectedDate,\n        title: eventName,\n        status: 'todo',\n      };\n      setEvents([...events, newEvent]);\n      setSelectedDate(null);\n      setEventName('');\n      setSelectedDate(newEvent.date);\n    }\n  };\n\n  const updateEvent = (eventId, newName) => {\n    const updatedEvents = events.map(event => {\n      if (event.id === eventId) {\n        return {\n          ...event,\n          title: newName,\n          status: 'in progress',\n        };\n      }\n      return event;\n    });\n    setEvents(updatedEvents);\n  };\n\n  const deleteEvent = eventId => {\n    const updatedEvents = events.map(event => {\n      if (event.id === eventId) {\n        return {\n          ...event,\n          status: 'done',\n        };\n      }\n      return event;\n    });\n    setEvents(updatedEvents);\n  };\n\n  // const totalEvents = events.length;\n  // const eventsOnSelectedDate = events.filter(\n  //   event => event.date.toDateString() === selectedDate?.toDateString()\n  // );\n\n  // const eventsPercentage =\n  //   totalEvents > 0 ? (eventsOnSelectedDate.length / totalEvents) * 100 : 0;\n\n  return (\n    <div className=\"app\">\n      <h1>Statistics</h1>\n      <div className=\"container\">\n        <div className=\"calendar-container\">\n          <Calendar\n            value={selectedDate}\n            onClickDay={dateClickHandler}\n            tileClassName={({ date }) =>\n              selectedDate &&\n              date.toDateString() === selectedDate.toDateString()\n                ? 'selected'\n                : events.some(\n                    event => event.date.toDateString() === date.toDateString()\n                  )\n                ? 'event-marked'\n                : ''\n            }\n          />\n        </div>\n        <div className=\"event-container\">\n          {selectedDate && (\n            <div className=\"event-form\">\n              <h2>Create Event</h2>\n              <p>Selected Date: {selectedDate.toDateString()}</p>\n              <input\n                type=\"text\"\n                placeholder=\"Event Name\"\n                value={eventName}\n                onChange={eventUpdateHandler}\n              />\n              <button className=\"create-btn\" onClick={createEvent}>\n                Click Here to Add Event\n              </button>\n            </div>\n          )}\n          {events.length > 0 && selectedDate && (\n            <div className=\"event-list\">\n              <h2>My Created Event List</h2>\n              <div className=\"event-cards\">\n                {events.map(event => {\n                  if (\n                    event.date.toDateString() === selectedDate?.toDateString()\n                  ) {\n                    return (\n                      <div key={event.id} className=\"event-card\">\n                        <div className=\"event-card-header\">\n                          <span className=\"event-date\">\n                            {event.date.toDateString()}\n                          </span>\n                          <div className=\"event-actions\">\n                            <button\n                              className=\"update-btn\"\n                              onClick={() =>\n                                updateEvent(event.id, prompt('Enter New Title'))\n                              }\n                            >\n                              Update Event\n                            </button>\n                            <button\n                              className=\"delete-btn\"\n                              onClick={() => deleteEvent(event.id)}\n                            >\n                              Delete Event\n                            </button>\n                          </div>\n                        </div>\n                        <div className=\"event-card-body\">\n                          <p className=\"event-title\">{event.title}</p>\n                        </div>\n                      </div>\n                    );\n                  } else {\n                    return null;\n                  }\n                })}\n              </div>\n            </div>\n          )}\n          <BarChart\n            events={events}\n            selectedDate={selectedDate}\n            updateEvent={updateEvent}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default StatisticsChart;\n","import StatisticsChart from 'components/StatisticsChart/StatisticsChart';\nexport default function StatisticsPage() {\n  return (\n    <div>\n      <StatisticsChart />\n    </div>\n  );\n}\n"],"names":["_ref","events","selectedDate","todoForMonth","updateEvent","filter","event","status","inProgressForMonth","doneForMonth","totalTasksForMonth","length","todoByDay","date","toDateString","inProgressByDay","doneByDay","allTasksByDay","todoPercentageForDay","inProgressPercentageForDay","donePercentageForDay","todoPercentageForMonth","inProgressPercentageForMonth","donePercentageForMonth","maxHeight","heightForTodoDay","heightForInProgressDay","heightForDoneDay","heightForTodoMonth","heightForInProgressMonth","heightForDoneMonth","_jsxs","className","children","_jsx","style","height","concat","toFixed","_useState","useState","_useState2","_slicedToArray","setSelectedDate","_useState3","_useState4","eventName","setEventName","_useState5","_useState6","setEvents","eventId","newName","updatedEvents","map","id","_objectSpread","title","Calendar","value","onClickDay","tileClassName","some","type","placeholder","onChange","target","onClick","newEvent","Date","getTime","_toConsumableArray","prompt","deleteEvent","BarChart","StatisticsPage","StatisticsChart"],"sourceRoot":""}