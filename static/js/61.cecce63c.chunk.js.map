{"version":3,"file":"static/js/61.cecce63c.chunk.js","mappings":"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","sources":["webpack://react-team-project/./src/components/PeriodPaginator/PeriodPaginator.module.css?edee","components/PeriodPaginator/PeriodPaginator.jsx","webpack://react-team-project/./src/components/PeriodTypeSelect/PeriodTypeSelect.module.css?d6f7","components/PeriodTypeSelect/PeriodTypeSelect.jsx","webpack://react-team-project/./src/components/Calendar/CalendarToolbar/CalendarToolbar.module.css?152c","components/Calendar/CalendarToolbar/CalendarToolbar.jsx","pages/CalendarPage/CalendarPage.jsx","../node_modules/date-fns/esm/addDays/index.js","../node_modules/date-fns/esm/isSameMonth/index.js","../node_modules/date-fns/esm/subDays/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"PeriodPaginator_wrapper__n3Arq\",\"buttons_container\":\"PeriodPaginator_buttons_container__K4cwq\",\"button\":\"PeriodPaginator_button__uby6p\",\"button_left\":\"PeriodPaginator_button_left__BL4Ri\",\"button_right\":\"PeriodPaginator_button_right__JbrnU\",\"name_container_month\":\"PeriodPaginator_name_container_month__ShgWk\",\"name_container_day\":\"PeriodPaginator_name_container_day__WZ+Ba\",\"name\":\"PeriodPaginator_name__Dfk9Y\",\"icon\":\"PeriodPaginator_icon__U7PfY\",\"icon_active\":\"PeriodPaginator_icon_active__Fprkw\"};","// CalendarToolbar.js\n\n// PeriodPaginator.js\n\nimport React, { useState, useEffect } from 'react';\nimport { format, subDays, addDays, addMonths, subMonths } from 'date-fns';\nimport { FiChevronRight, FiChevronLeft } from 'react-icons/fi';\nimport styles from './PeriodPaginator.module.css';\nimport { useNavigate } from 'react-router-dom';\nimport { useDate } from 'hooks/useDate';\nimport { useLocation } from 'react-router-dom'; \n\nexport const PeriodPaginator = ({ activePage }) => {\n  const [activeBtn, setActiveBtn] = useState('');\n  const [visibleDate, setVisibleDate] = useState(useDate());\n\n  const navigate = useNavigate();\n  const location = useLocation(); \n\n  useEffect(() => {\n    const currentDateFromUrl = new Date(location.pathname.split('/').pop());\n    if (!isNaN(currentDateFromUrl.getTime())) {\n      setVisibleDate(currentDateFromUrl);\n    }\n  }, [location]); \n\n  const handleNextDay = () => {\n    setActiveBtn('next');\n\n    const newVisibleDate = addDays(visibleDate, 1);\n    setVisibleDate(newVisibleDate);\n    navigate(`/user/calendar/day/${format(newVisibleDate, 'ddMMMMyyyy')}`);\n  };\n\n  const handlePrevDay = () => {\n    setActiveBtn('prev');\n\n    const newVisibleDate = subDays(visibleDate, 1);\n    setVisibleDate(newVisibleDate);\n    navigate(`/user/calendar/day/${format(newVisibleDate, 'ddMMMMyyyy')}`);\n  };\n\n  const handleNextMonth = () => {\n    setActiveBtn('next');\n\n    const newVisibleDate = addMonths(visibleDate, 1);\n    setVisibleDate(newVisibleDate);\n    navigate(`/user/calendar/month/${format(newVisibleDate, 'MMMMyyyy')}`);\n  };\n\n  const handlePrevMonth = () => {\n    setActiveBtn('prev');\n\n    const newVisibleDate = subMonths(visibleDate, 1);\n    setVisibleDate(newVisibleDate);\n    navigate(`/user/calendar/month/${format(newVisibleDate, 'MMMMyyyy')}`);\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      {activePage === 'month' && (\n        <>\n          <div className={styles.name_container_month}>\n            <h1 className={styles.name}>{format(visibleDate, ' MMM yyyy')}</h1>\n          </div>\n          <div className={styles.buttons_container}>\n            <button\n              className={`${styles.button} ${styles.button_left}`}\n              type=\"button\"\n              onClick={handlePrevMonth}\n            >\n              <FiChevronLeft\n                className={\n                  activeBtn === 'prev'\n                    ? `${styles.icon_active}`\n                    : `${styles.icon}`\n                }\n              />\n            </button>\n            <button\n              className={`${styles.button} ${styles.button_right}`}\n              type=\"button\"\n              onClick={handleNextMonth}\n            >\n              <FiChevronRight\n                className={\n                  activeBtn === 'next'\n                    ? `${styles.icon_active}`\n                    : `${styles.icon}`\n                }\n              />\n            </button>\n          </div>\n        </>\n      )}\n\n      {activePage === 'day' && (\n        <>\n          <div className={styles.name_container_day}>\n            <h1 className={styles.name}>{format(visibleDate, 'd MMM yyyy')}</h1>\n          </div>\n          <div className={styles.buttons_container}>\n            <button\n              className={`${styles.button} ${styles.button_left}`}\n              type=\"button\"\n              onClick={handlePrevDay}\n            >\n              <FiChevronLeft\n                className={\n                  activeBtn === 'prev'\n                    ? `${styles.icon_active}`\n                    : `${styles.icon}`\n                }\n              />\n            </button>\n            <button\n              className={`${styles.button} ${styles.button_right}`}\n              type=\"button\"\n              onClick={handleNextDay}\n            >\n              <FiChevronRight\n                className={\n                  activeBtn === 'next'\n                    ? `${styles.icon_active}`\n                    : `${styles.icon}`\n                }\n              />\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"periodTypeSelectMarkUp\":\"PeriodTypeSelect_periodTypeSelectMarkUp__c+4Wo\",\"navLink_day\":\"PeriodTypeSelect_navLink_day__cZrs0\",\"activeLink_day\":\"PeriodTypeSelect_activeLink_day__h7bxD\",\"navLink_month\":\"PeriodTypeSelect_navLink_month__7FavA\",\"activeLink_month\":\"PeriodTypeSelect_activeLink_month__VaiuX\"};","import { NavLink } from 'react-router-dom';\nimport { format, isSameMonth } from 'date-fns';\nimport styles from './PeriodTypeSelect.module.css';\nimport { useDate } from 'hooks/useDate';\n\nexport const PeriodTypeSelect = ({ activePage }) => {\n  const urlDate = useDate();\n  const today = new Date();\n\n  const currentDate = format(urlDate, 'MMMMyyyy');\n  const currentDay = format(urlDate, 'ddMMMMyyyy');\n  const formattedToday = format(today, 'ddMMMMyyyy');\n\n  const isToday = isSameMonth(urlDate, today);\n\n  return (\n    <div className={styles.periodTypeSelectMarkUp}>\n      <NavLink\n        to={`/user/calendar/month/${currentDate}`}\n        className={\n          activePage === 'month'\n            ? styles.activeLink_month\n            : styles.navLink_month\n        }\n      >\n        Month\n      </NavLink>\n      <NavLink\n        to={\n          isToday\n            ? `/user/calendar/day/${formattedToday}`\n            : `/user/calendar/day/${currentDay}`\n        }\n        className={\n          activePage === 'day' ? styles.activeLink_day : styles.navLink_day\n        }\n      >\n        Day\n      </NavLink>\n    </div>\n  );\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"CalendarToolbar_wrapper__EWtKM\"};","// CalendarToolbar.js\n\n// CalendarToolbar.js\n\nimport React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { PeriodPaginator } from '../../PeriodPaginator/PeriodPaginator';\nimport { PeriodTypeSelect } from '../../PeriodTypeSelect/PeriodTypeSelect';\nimport styles from './CalendarToolbar.module.css';\n\nexport default function CalendarToolbar() {\n  const location = useLocation();\n\n  const activePage = () => {\n    let active;\n    if (location.pathname.includes('month')) {\n      active = 'month';\n    } else if (location.pathname.includes('day')) {\n      active = 'day';\n    }\n    return active;\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      <PeriodPaginator activePage={activePage()} />\n      <PeriodTypeSelect activePage={activePage()} />\n    </div>\n  );\n}\n","import { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport  CalendarToolbar  from '../../components/Calendar/CalendarToolbar/CalendarToolbar';\n\n\nexport default function CalendarPage() {\n  \n  return (\n    <div >\n      <CalendarToolbar/> \n      <Suspense fallback={null}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\n\n","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameMonth\n * @category Month Helpers\n * @summary Are the given dates in the same month (and year)?\n *\n * @description\n * Are the given dates in the same month (and year)?\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same month (and year)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same month?\n * const result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n *\n * @example\n * // Are 2 September 2014 and 25 September 2015 in the same month?\n * const result = isSameMonth(new Date(2014, 8, 2), new Date(2015, 8, 25))\n * //=> false\n */\nexport default function isSameMonth(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();\n}","import addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\nexport default function subDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addDays(dirtyDate, -amount);\n}"],"names":["PeriodPaginator","_ref","activePage","_useState","useState","_useState2","_slicedToArray","activeBtn","setActiveBtn","_useState3","useDate","_useState4","visibleDate","setVisibleDate","navigate","useNavigate","location","useLocation","useEffect","currentDateFromUrl","Date","pathname","split","pop","isNaN","getTime","_jsxs","className","styles","children","_Fragment","_jsx","format","concat","type","onClick","newVisibleDate","subMonths","FiChevronLeft","addMonths","FiChevronRight","subDays","addDays","PeriodTypeSelect","urlDate","today","currentDate","currentDay","formattedToday","isToday","isSameMonth","NavLink","to","CalendarToolbar","active","includes","CalendarPage","Suspense","fallback","Outlet","dirtyDate","dirtyAmount","requiredArgs","arguments","date","toDate","amount","toInteger","NaN","setDate","getDate","dirtyDateLeft","dirtyDateRight","dateLeft","dateRight","getFullYear","getMonth"],"sourceRoot":""}