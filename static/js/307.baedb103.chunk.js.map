{"version":3,"file":"static/js/307.baedb103.chunk.js","mappings":"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","sources":["webpack://react-team-project/./src/components/PeriodPaginator/PeriodPaginator.module.css?edee","components/PeriodPaginator/PeriodPaginator.jsx","webpack://react-team-project/./src/components/PeriodTypeSelect/PeriodTypeSelect.module.css?d6f7","components/PeriodTypeSelect/PeriodTypeSelect.jsx","webpack://react-team-project/./src/components/Calendar/CalendarToolbar/CalendarToolbar.module.css?152c","components/Calendar/CalendarToolbar/CalendarToolbar.jsx","pages/CalendarPage.jsx","../node_modules/date-fns/esm/addDays/index.js","../node_modules/date-fns/esm/addMonths/index.js","../node_modules/date-fns/esm/isSameMonth/index.js","../node_modules/date-fns/esm/subDays/index.js","../node_modules/date-fns/esm/subMonths/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"PeriodPaginator_wrapper__n3Arq\",\"buttons_container\":\"PeriodPaginator_buttons_container__K4cwq\",\"button\":\"PeriodPaginator_button__uby6p\",\"button_left\":\"PeriodPaginator_button_left__BL4Ri\",\"button_right\":\"PeriodPaginator_button_right__JbrnU\",\"name_container\":\"PeriodPaginator_name_container__IM611\",\"name\":\"PeriodPaginator_name__Dfk9Y\",\"icon\":\"PeriodPaginator_icon__U7PfY\",\"icon_active\":\"PeriodPaginator_icon_active__Fprkw\"};","import React, { useState } from 'react';\nimport { format, subDays, addDays, addMonths, subMonths } from 'date-fns';\nimport { FiChevronRight, FiChevronLeft } from 'react-icons/fi';\nimport styles from './PeriodPaginator.module.css';\nimport { useNavigate } from 'react-router-dom';\nimport { useDate } from 'hooks/useDate';\n\nexport const PeriodPaginator = ({ activePage }) => {\n  const [activeBtn, setActiveBtn] = useState('');\n  const [visibleDate, setVisibleDate] = useState(useDate());\n\n  const navigate = useNavigate();\n  \n  const handleNextDay = () => {\n    setActiveBtn('next');\n\n    const newVisibleDate = addDays(visibleDate, 1);\n    setVisibleDate(newVisibleDate);\n    navigate(`/user/calendar/day/${format(newVisibleDate, 'ddMMMMyyyy')}`);\n  };\n\n  const handlePrevDay = () => {\n    setActiveBtn('prev');\n\n    const newVisibleDate = subDays(visibleDate, 1);\n    setVisibleDate(newVisibleDate);\n    navigate(`/user/calendar/day/${format(newVisibleDate, 'ddMMMMyyyy')}`);\n  };\n\n  const handleNextMonth = () => {\n    setActiveBtn('next');\n\n    const newVisibleDate = addMonths(visibleDate, 1);\n    setVisibleDate(newVisibleDate);\n    navigate(`/user/calendar/month/${format(newVisibleDate, 'MMMMyyyy')}`);\n  };\n\n  const handlePrevMonth = () => {\n    setActiveBtn('prev');\n\n    const newVisibleDate = subMonths(visibleDate, 1);\n    setVisibleDate(newVisibleDate);\n    navigate(`/user/calendar/month/${format(newVisibleDate, 'MMMMyyyy')}`);\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      {activePage === 'month' && (\n        <>\n          <div className={styles.name_container}>\n            <h1 className={styles.name}>{format(visibleDate, ' MMM yyyy')}</h1>\n          </div>\n          <div className={styles.buttons_container}>\n            <button\n              className={`${styles.button} ${styles.button_left}`}\n              type=\"button\"\n              onClick={handlePrevMonth}\n            >\n              <FiChevronLeft\n                className={\n                  activeBtn === 'prev'\n                    ? `${styles.icon_active}`\n                    : `${styles.icon}`\n                }\n              />\n            </button>\n            <button\n              className={`${styles.button} ${styles.button_right}`}\n              type=\"button\"\n              onClick={handleNextMonth}\n            >\n              <FiChevronRight\n                className={\n                  activeBtn === 'next'\n                    ? `${styles.icon_active}`\n                    : `${styles.icon}`\n                }\n              />\n            </button>\n          </div>\n        </>\n      )}\n\n      {activePage === 'day' && (\n        <>\n          <div className={styles.name_container}>\n            <h1 className={styles.name}>{format(visibleDate, 'd MMM yyyy')}</h1>\n          </div>\n          <div className={styles.buttons_container}>\n            <button\n              className={`${styles.button} ${styles.button_left}`}\n              type=\"button\"\n              onClick={handlePrevDay}\n            >\n              <FiChevronLeft\n                className={\n                  activeBtn === 'prev'\n                    ? `${styles.icon_active}`\n                    : `${styles.icon}`\n                }\n              />\n            </button>\n            <button\n              className={`${styles.button} ${styles.button_right}`}\n              type=\"button\"\n              onClick={handleNextDay}\n            >\n              <FiChevronRight\n                className={\n                  activeBtn === 'next'\n                    ? `${styles.icon_active}`\n                    : `${styles.icon}`\n                }\n              />\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"periodTypeSelectMarkUp\":\"PeriodTypeSelect_periodTypeSelectMarkUp__c+4Wo\",\"navLink_day\":\"PeriodTypeSelect_navLink_day__cZrs0\",\"activeLink_day\":\"PeriodTypeSelect_activeLink_day__h7bxD\",\"navLink_month\":\"PeriodTypeSelect_navLink_month__7FavA\",\"activeLink_month\":\"PeriodTypeSelect_activeLink_month__VaiuX\"};","import { NavLink } from 'react-router-dom';\nimport { format, isSameMonth } from 'date-fns';\nimport styles from './PeriodTypeSelect.module.css';\nimport { useDate } from 'hooks/useDate';\n\nexport const PeriodTypeSelect = ({ activePage }) => {\n  const urlDate = useDate();\n  const today = new Date();\n\n  const currentDate = format(urlDate, 'MMMMyyyy');\n  const currentDay = format(urlDate, 'ddMMMMyyyy');\n  const formattedToday = format(today, 'ddMMMMyyyy');\n\n  const isToday = isSameMonth(urlDate, today);\n\n  return (\n    <div className={styles.periodTypeSelectMarkUp}>\n      <NavLink\n        to={`/user/calendar/month/${currentDate}`}\n        className={\n          activePage === 'month'\n            ? styles.activeLink_month\n            : styles.navLink_month\n        }\n      >\n        Month\n      </NavLink>\n      <NavLink\n        to={\n          isToday\n            ? `/user/calendar/day/${formattedToday}`\n            : `/user/calendar/day/${currentDay}`\n        }\n        className={\n          activePage === 'day' ? styles.activeLink_day : styles.navLink_day\n        }\n      >\n        Day\n      </NavLink>\n    </div>\n  );\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"CalendarToolbar_wrapper__EWtKM\"};","import { useLocation } from 'react-router-dom';\nimport { PeriodPaginator } from '../../PeriodPaginator/PeriodPaginator';\nimport { PeriodTypeSelect } from '../../PeriodTypeSelect/PeriodTypeSelect';\nimport styles from './CalendarToolbar.module.css';\n\nexport default function CalendarToolbar() {\n  const location = useLocation();\n\n  const activePage = () => {\n    let active;\n    if(location.pathname.includes(\"month\")){\n      active = 'month'\n    }\n    else if(location.pathname.includes(\"day\")){\n      active = 'day'\n    }\n    return active;\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      <PeriodPaginator activePage={activePage()} />\n      <PeriodTypeSelect activePage={activePage()} />\n    </div>\n  );\n};\n\n","import { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport  CalendarToolbar  from '../components/Calendar/CalendarToolbar/CalendarToolbar';\n\n\nexport default function CalendarPage() {\n  \n  return (\n    <div >\n      <CalendarToolbar/> \n      <Suspense fallback={null}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\n\n","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  var dayOfMonth = date.getDate();\n\n  // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameMonth\n * @category Month Helpers\n * @summary Are the given dates in the same month (and year)?\n *\n * @description\n * Are the given dates in the same month (and year)?\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same month (and year)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same month?\n * const result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n *\n * @example\n * // Are 2 September 2014 and 25 September 2015 in the same month?\n * const result = isSameMonth(new Date(2014, 8, 2), new Date(2015, 8, 25))\n * //=> false\n */\nexport default function isSameMonth(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();\n}","import addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\nexport default function subDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addDays(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * const result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}"],"names":["PeriodPaginator","_ref","activePage","_useState","useState","_useState2","_slicedToArray","activeBtn","setActiveBtn","_useState3","useDate","_useState4","visibleDate","setVisibleDate","navigate","useNavigate","_jsxs","className","styles","children","_Fragment","_jsx","format","concat","type","onClick","newVisibleDate","subMonths","FiChevronLeft","addMonths","FiChevronRight","subDays","addDays","PeriodTypeSelect","urlDate","today","Date","currentDate","currentDay","formattedToday","isToday","isSameMonth","NavLink","to","CalendarToolbar","location","useLocation","active","pathname","includes","CalendarPage","Suspense","fallback","Outlet","dirtyDate","dirtyAmount","requiredArgs","arguments","date","toDate","amount","toInteger","isNaN","NaN","setDate","getDate","dayOfMonth","endOfDesiredMonth","getTime","setMonth","getMonth","daysInMonth","setFullYear","getFullYear","dirtyDateLeft","dirtyDateRight","dateLeft","dateRight"],"sourceRoot":""}