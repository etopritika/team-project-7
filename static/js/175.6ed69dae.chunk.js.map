{"version":3,"file":"static/js/175.6ed69dae.chunk.js","mappings":"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","sources":["webpack://react-team-project/./src/components/PeriodPaginator/PeriodPaginator.module.css?edee","components/PeriodPaginator/PeriodPaginator.jsx","components/StatisticsChart/barChart.jsx","components/StatisticsChart/StatisticsChart.jsx","pages/StatisticsPage.jsx","../node_modules/date-fns/esm/addDays/index.js","../node_modules/date-fns/esm/addMonths/index.js","../node_modules/date-fns/esm/subDays/index.js","../node_modules/date-fns/esm/subMonths/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"PeriodPaginator_wrapper__n3Arq\",\"buttons_container\":\"PeriodPaginator_buttons_container__K4cwq\",\"button\":\"PeriodPaginator_button__uby6p\",\"button_left\":\"PeriodPaginator_button_left__BL4Ri\",\"button_right\":\"PeriodPaginator_button_right__JbrnU\",\"name_container_month\":\"PeriodPaginator_name_container_month__ShgWk\",\"name_container_day\":\"PeriodPaginator_name_container_day__WZ+Ba\",\"name\":\"PeriodPaginator_name__Dfk9Y\",\"icon\":\"PeriodPaginator_icon__U7PfY\",\"icon_active\":\"PeriodPaginator_icon_active__Fprkw\"};","import React, { useState } from 'react';\nimport { format, subDays, addDays, addMonths, subMonths } from 'date-fns';\nimport { FiChevronRight, FiChevronLeft } from 'react-icons/fi';\nimport styles from './PeriodPaginator.module.css';\nimport { useNavigate } from 'react-router-dom';\nimport { useDate } from 'hooks/useDate';\n\nexport const PeriodPaginator = ({ activePage }) => {\n  const [activeBtn, setActiveBtn] = useState('');\n  const [visibleDate, setVisibleDate] = useState(useDate());\n\n  const navigate = useNavigate();\n  \n  const handleNextDay = () => {\n    setActiveBtn('next');\n\n    const newVisibleDate = addDays(visibleDate, 1);\n    setVisibleDate(newVisibleDate);\n    navigate(`/user/calendar/day/${format(newVisibleDate, 'ddMMMMyyyy')}`);\n  };\n\n  const handlePrevDay = () => {\n    setActiveBtn('prev');\n\n    const newVisibleDate = subDays(visibleDate, 1);\n    setVisibleDate(newVisibleDate);\n    navigate(`/user/calendar/day/${format(newVisibleDate, 'ddMMMMyyyy')}`);\n  };\n\n  const handleNextMonth = () => {\n    setActiveBtn('next');\n\n    const newVisibleDate = addMonths(visibleDate, 1);\n    setVisibleDate(newVisibleDate);\n    navigate(`/user/calendar/month/${format(newVisibleDate, 'MMMMyyyy')}`);\n  };\n\n  const handlePrevMonth = () => {\n    setActiveBtn('prev');\n\n    const newVisibleDate = subMonths(visibleDate, 1);\n    setVisibleDate(newVisibleDate);\n    navigate(`/user/calendar/month/${format(newVisibleDate, 'MMMMyyyy')}`);\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      {activePage === 'month' && (\n        <>\n          <div className={styles.name_container_month}>\n            <h1 className={styles.name}>{format(visibleDate, ' MMM yyyy')}</h1>\n          </div>\n          <div className={styles.buttons_container}>\n            <button\n              className={`${styles.button} ${styles.button_left}`}\n              type=\"button\"\n              onClick={handlePrevMonth}\n            >\n              <FiChevronLeft\n                className={\n                  activeBtn === 'prev'\n                    ? `${styles.icon_active}`\n                    : `${styles.icon}`\n                }\n              />\n            </button>\n            <button\n              className={`${styles.button} ${styles.button_right}`}\n              type=\"button\"\n              onClick={handleNextMonth}\n            >\n              <FiChevronRight\n                className={\n                  activeBtn === 'next'\n                    ? `${styles.icon_active}`\n                    : `${styles.icon}`\n                }\n              />\n            </button>\n          </div>\n        </>\n      )}\n\n      {activePage === 'day' && (\n        <>\n          <div className={styles.name_container_day}>\n            <h1 className={styles.name}>{format(visibleDate, 'd MMM yyyy')}</h1>\n          </div>\n          <div className={styles.buttons_container}>\n            <button\n              className={`${styles.button} ${styles.button_left}`}\n              type=\"button\"\n              onClick={handlePrevDay}\n            >\n              <FiChevronLeft\n                className={\n                  activeBtn === 'prev'\n                    ? `${styles.icon_active}`\n                    : `${styles.icon}`\n                }\n              />\n            </button>\n            <button\n              className={`${styles.button} ${styles.button_right}`}\n              type=\"button\"\n              onClick={handleNextDay}\n            >\n              <FiChevronRight\n                className={\n                  activeBtn === 'next'\n                    ? `${styles.icon_active}`\n                    : `${styles.icon}`\n                }\n              />\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};","import React from 'react';\n\nimport './barChart.css';\n\nconst BarChart = ({ events, selectedDate, updateEvent }) => {\n  const todoForMonth = events.filter(event => event.status === 'todo');\n  const inProgressForMonth = events.filter(\n    event => event.status === 'in progress'\n  );\n  const doneForMonth = events.filter(event => event.status === 'done');\n\n  const totalTasksForMonth =\n    todoForMonth.length + inProgressForMonth.length + doneForMonth.length;\n\n  const todoByDay = events.filter(\n    event =>\n      event.date.toDateString() === selectedDate.toDateString() &&\n      event.status === 'todo'\n  ).length;\n  const inProgressByDay = events.filter(\n    event =>\n      event.date.toDateString() === selectedDate.toDateString() &&\n      event.status === 'in progress'\n  ).length;\n  const doneByDay = events.filter(\n    event =>\n      event.date.toDateString() === selectedDate.toDateString() &&\n      event.status === 'done'\n  ).length;\n\n  const allTasksByDay = todoByDay + inProgressByDay + doneByDay;\n\n  const todoPercentageForDay =\n    allTasksByDay > 0 ? (todoByDay / allTasksByDay) * 100 : 0;\n  const inProgressPercentageForDay =\n    allTasksByDay > 0 ? (inProgressByDay / allTasksByDay) * 100 : 0;\n  const donePercentageForDay =\n    allTasksByDay > 0 ? (doneByDay / allTasksByDay) * 100 : 0;\n\n  const todoPercentageForMonth =\n    (todoForMonth.length / totalTasksForMonth) * 100 || 0;\n  const inProgressPercentageForMonth =\n    (inProgressForMonth.length / totalTasksForMonth) * 100 || 0;\n  const donePercentageForMonth =\n    (doneForMonth.length / totalTasksForMonth) * 100 || 0;\n\n  const maxHeight = 268;\n  const heightForTodoDay = (maxHeight * todoPercentageForDay) / 100;\n  const heightForInProgressDay = (maxHeight * inProgressPercentageForDay) / 100;\n  const heightForDoneDay = (maxHeight * donePercentageForDay) / 100;\n\n  const heightForTodoMonth = (maxHeight * todoPercentageForMonth) / 100;\n  const heightForInProgressMonth =\n    (maxHeight * inProgressPercentageForMonth) / 100;\n  const heightForDoneMonth = (maxHeight * donePercentageForMonth) / 100;\n\n  return (\n    <div className=\"statistickImg\">\n      <div className=\"line\"></div>\n      <div className=\"line2\"></div>\n      <div className=\"line3\"></div>\n      <div className=\"line4\"></div>\n      <div className=\"line5\"></div>\n      <div className=\"line6\"></div>\n      <div className=\"statistic_centr\">\n        <div className=\"x-axis\">\n          <span className=\"x-axis-span_0\">0</span>\n          <span className=\"x-axis-span_20\">20</span>\n          <span className=\"x-axis-span_40\">40</span>\n          <span className=\"x-axis-span_60\">60</span>\n          <span className=\"x-axis-span_80\">80</span>\n          <span>100</span>\n          <span className=\"tasks_text\">Tasks</span>\n        </div>\n\n        <div className=\"chart_todo\">\n          <div className=\"bar_day\" style={{ height: `${heightForTodoDay}px` }}>\n            <span className=\"bar-label\">\n              {todoPercentageForDay.toFixed(2)}%\n            </span>\n          </div>\n        </div>\n\n        <span className=\"nameBar\">To Do</span>\n        <div className=\"chart\">\n          <div className=\"bar\" style={{ height: `${heightForTodoMonth}px` }}>\n            <span className=\"bar-label\">\n              {todoPercentageForMonth.toFixed(2)}%\n            </span>\n          </div>\n        </div>\n\n        <div className=\"chart_in_progres\">\n          <div\n            className=\"bar_day\"\n            style={{ height: `${heightForInProgressDay}px` }}\n          >\n            <span className=\"bar-label\">\n              {inProgressPercentageForDay.toFixed(2)}%\n            </span>\n          </div>\n        </div>\n        <span className=\"nameBar_progress\">In Progress</span>\n\n        <div className=\"chart\">\n          <div\n            className=\"bar\"\n            style={{ height: `${heightForInProgressMonth}px` }}\n          >\n            <span className=\"bar-label\">\n              {inProgressPercentageForMonth.toFixed(2)}%\n            </span>\n          </div>\n        </div>\n\n        <div className=\"chart_done\">\n          <div className=\"bar_day\" style={{ height: `${heightForDoneDay}px` }}>\n            <span className=\"bar-label\">\n              {donePercentageForDay.toFixed(2)}%\n            </span>\n          </div>\n        </div>\n        <span className=\"nameBar_done\">Done</span>\n        <div className=\"chart\">\n          <div className=\"bar\" style={{ height: `${heightForDoneMonth}px` }}>\n            <span className=\"bar-label\">\n              {donePercentageForMonth.toFixed(2)}%\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default BarChart;\n","import React, { useState } from 'react';\nimport './statistickChart.css';\nimport BarChart from './barChart';\nimport { PeriodPaginator } from '../PeriodPaginator/PeriodPaginator';\n\nconst StatisticsChart = () => {\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [eventName, setEventName] = useState('');\n  const [events, setEvents] = useState([]);\n\n  // const dateClickHandler = date => {\n  //   setSelectedDate(date);\n  // };\n\n  const eventUpdateHandler = event => {\n    setEventName(event.target.value);\n  };\n\n  const createEvent = () => {\n    if (selectedDate && eventName) {\n      const newEvent = {\n        id: new Date().getTime(),\n        date: selectedDate,\n        title: eventName,\n        status: 'todo',\n      };\n      setEvents([...events, newEvent]);\n      setSelectedDate(null);\n      setEventName('');\n      setSelectedDate(newEvent.date);\n    }\n  };\n\n  const updateEvent = (eventId, newName) => {\n    const updatedEvents = events.map(event => {\n      if (event.id === eventId) {\n        return {\n          ...event,\n          title: newName,\n          status: 'in progress',\n        };\n      }\n      return event;\n    });\n    setEvents(updatedEvents);\n  };\n\n  const deleteEvent = eventId => {\n    const updatedEvents = events.map(event => {\n      if (event.id === eventId) {\n        return {\n          ...event,\n          status: 'done',\n        };\n      }\n      return event;\n    });\n    setEvents(updatedEvents);\n  };\n\n  // const totalEvents = events.length;\n  // const eventsOnSelectedDate = events.filter(\n  //   event => event.date.toDateString() === selectedDate?.toDateString()\n  // );\n\n  // const eventsPercentage =\n  //   totalEvents > 0 ? (eventsOnSelectedDate.length / totalEvents) * 100 : 0;\n\n  return (\n    <div className=\"event-container\">\n      <div className=\"dayCont\">\n        <p className=\"statisticsByDay\">By Day</p>\n        <p className=\"statisticsByMonth\">By Month</p>\n      </div>\n      <PeriodPaginator />\n\n      {selectedDate && (\n        <div className=\"event-form\">\n          <h2>Create Event</h2>\n          <p>Selected Date: {selectedDate.toDateString()}</p>\n          <input\n            type=\"text\"\n            placeholder=\"Event Name\"\n            value={eventName}\n            onChange={eventUpdateHandler}\n          />\n          <button className=\"create-btn\" onClick={createEvent}>\n            Click Here to Add Event\n          </button>\n        </div>\n      )}\n      {events.length > 0 && selectedDate && (\n        <div className=\"event-list\">\n          <h2>My Created Event List</h2>\n          <div className=\"event-cards\">\n            {events.map(event => {\n              if (event.date.toDateString() === selectedDate?.toDateString()) {\n                return (\n                  <div key={event.id} className=\"event-card\">\n                    <div className=\"event-card-header\">\n                      <span className=\"event-date\">\n                        {event.date.toDateString()}\n                      </span>\n                      <div className=\"event-actions\">\n                        <button\n                          className=\"update-btn\"\n                          onClick={() =>\n                            updateEvent(event.id, prompt('Enter New Title'))\n                          }\n                        >\n                          Update Event\n                        </button>\n                        <button\n                          className=\"delete-btn\"\n                          onClick={() => deleteEvent(event.id)}\n                        >\n                          Delete Event\n                        </button>\n                      </div>\n                    </div>\n                    <div className=\"event-card-body\">\n                      <p className=\"event-title\">{event.title}</p>\n                    </div>\n                  </div>\n                );\n              } else {\n                return null;\n              }\n            })}\n          </div>\n        </div>\n      )}\n      <BarChart\n        events={events}\n        selectedDate={selectedDate}\n        updateEvent={updateEvent}\n      />\n    </div>\n  );\n};\n\nexport default StatisticsChart;\n","import StatisticsChart from 'components/StatisticsChart/StatisticsChart';\nexport default function StatisticsPage() {\n  return (\n    <div>\n      <StatisticsChart />\n    </div>\n  );\n}\n","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  var dayOfMonth = date.getDate();\n\n  // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\nexport default function subDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addDays(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * const result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}"],"names":["PeriodPaginator","_ref","activePage","_useState","useState","_useState2","_slicedToArray","activeBtn","setActiveBtn","_useState3","useDate","_useState4","visibleDate","setVisibleDate","navigate","useNavigate","_jsxs","className","styles","children","_Fragment","_jsx","format","concat","type","onClick","newVisibleDate","subMonths","FiChevronLeft","addMonths","FiChevronRight","subDays","addDays","events","selectedDate","todoForMonth","updateEvent","filter","event","status","inProgressForMonth","doneForMonth","totalTasksForMonth","length","todoByDay","date","toDateString","inProgressByDay","doneByDay","allTasksByDay","todoPercentageForDay","inProgressPercentageForDay","donePercentageForDay","todoPercentageForMonth","inProgressPercentageForMonth","donePercentageForMonth","maxHeight","heightForTodoDay","heightForInProgressDay","heightForDoneDay","heightForTodoMonth","heightForInProgressMonth","heightForDoneMonth","style","height","toFixed","setSelectedDate","eventName","setEventName","_useState5","_useState6","setEvents","eventId","newName","updatedEvents","map","id","_objectSpread","title","placeholder","value","onChange","target","newEvent","Date","getTime","_toConsumableArray","prompt","deleteEvent","BarChart","StatisticsPage","StatisticsChart","dirtyDate","dirtyAmount","requiredArgs","arguments","toDate","amount","toInteger","isNaN","NaN","setDate","getDate","dayOfMonth","endOfDesiredMonth","setMonth","getMonth","daysInMonth","setFullYear","getFullYear"],"sourceRoot":""}